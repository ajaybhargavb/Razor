// <auto-generated />

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;


namespace Microsoft.AspNetCore.Razor.Language.Syntax
{
  internal partial class SyntaxVisitor<TResult>
  {
    /// <summary>Called when the visitor visits a RazorCommentBlockSyntax node.</summary>
    public virtual TResult VisitRazorCommentBlock(RazorCommentBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a RazorMetaCodeSyntax node.</summary>
    public virtual TResult VisitRazorMetaCode(RazorMetaCodeSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTransitionSyntax node.</summary>
    public virtual TResult VisitHtmlTransition(HtmlTransitionSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTextLiteralSyntax node.</summary>
    public virtual TResult VisitHtmlTextLiteral(HtmlTextLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlDocumentSyntax node.</summary>
    public virtual TResult VisitHtmlDocument(HtmlDocumentSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlBlockSyntax node.</summary>
    public virtual TResult VisitHtmlBlock(HtmlBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlMarkupBlockSyntax node.</summary>
    public virtual TResult VisitHtmlMarkupBlock(HtmlMarkupBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlCommentBlockSyntax node.</summary>
    public virtual TResult VisitHtmlCommentBlock(HtmlCommentBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTagBlockSyntax node.</summary>
    public virtual TResult VisitHtmlTagBlock(HtmlTagBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlMinimizedAttributeBlockSyntax node.</summary>
    public virtual TResult VisitHtmlMinimizedAttributeBlock(HtmlMinimizedAttributeBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlAttributeBlockSyntax node.</summary>
    public virtual TResult VisitHtmlAttributeBlock(HtmlAttributeBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlLiteralAttributeValueSyntax node.</summary>
    public virtual TResult VisitHtmlLiteralAttributeValue(HtmlLiteralAttributeValueSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlDynamicAttributeValueSyntax node.</summary>
    public virtual TResult VisitHtmlDynamicAttributeValue(HtmlDynamicAttributeValueSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpTransitionSyntax node.</summary>
    public virtual TResult VisitCSharpTransition(CSharpTransitionSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatementLiteralSyntax node.</summary>
    public virtual TResult VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpressionLiteralSyntax node.</summary>
    public virtual TResult VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpHiddenLiteralSyntax node.</summary>
    public virtual TResult VisitCSharpHiddenLiteral(CSharpHiddenLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpNoneLiteralSyntax node.</summary>
    public virtual TResult VisitCSharpNoneLiteral(CSharpNoneLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpCodeBlockSyntax node.</summary>
    public virtual TResult VisitCSharpCodeBlock(CSharpCodeBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpTemplateBlockSyntax node.</summary>
    public virtual TResult VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatement node.</summary>
    public virtual TResult VisitCSharpStatement(CSharpStatement node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatementBodySyntax node.</summary>
    public virtual TResult VisitCSharpStatementBody(CSharpStatementBodySyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpression node.</summary>
    public virtual TResult VisitCSharpExpression(CSharpExpression node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpressionBodySyntax node.</summary>
    public virtual TResult VisitCSharpExpressionBody(CSharpExpressionBodySyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpImplicitExpression node.</summary>
    public virtual TResult VisitCSharpImplicitExpression(CSharpImplicitExpression node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpImplicitExpressionBodySyntax node.</summary>
    public virtual TResult VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveSyntax node.</summary>
    public virtual TResult VisitCSharpDirective(CSharpDirectiveSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveBodySyntax node.</summary>
    public virtual TResult VisitCSharpDirectiveBody(CSharpDirectiveBodySyntax node)
    {
      return DefaultVisit(node);
    }
  }

  internal partial class SyntaxVisitor
  {
    /// <summary>Called when the visitor visits a RazorCommentBlockSyntax node.</summary>
    public virtual void VisitRazorCommentBlock(RazorCommentBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a RazorMetaCodeSyntax node.</summary>
    public virtual void VisitRazorMetaCode(RazorMetaCodeSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTransitionSyntax node.</summary>
    public virtual void VisitHtmlTransition(HtmlTransitionSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTextLiteralSyntax node.</summary>
    public virtual void VisitHtmlTextLiteral(HtmlTextLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlDocumentSyntax node.</summary>
    public virtual void VisitHtmlDocument(HtmlDocumentSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlBlockSyntax node.</summary>
    public virtual void VisitHtmlBlock(HtmlBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlMarkupBlockSyntax node.</summary>
    public virtual void VisitHtmlMarkupBlock(HtmlMarkupBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlCommentBlockSyntax node.</summary>
    public virtual void VisitHtmlCommentBlock(HtmlCommentBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTagBlockSyntax node.</summary>
    public virtual void VisitHtmlTagBlock(HtmlTagBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlMinimizedAttributeBlockSyntax node.</summary>
    public virtual void VisitHtmlMinimizedAttributeBlock(HtmlMinimizedAttributeBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlAttributeBlockSyntax node.</summary>
    public virtual void VisitHtmlAttributeBlock(HtmlAttributeBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlLiteralAttributeValueSyntax node.</summary>
    public virtual void VisitHtmlLiteralAttributeValue(HtmlLiteralAttributeValueSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlDynamicAttributeValueSyntax node.</summary>
    public virtual void VisitHtmlDynamicAttributeValue(HtmlDynamicAttributeValueSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpTransitionSyntax node.</summary>
    public virtual void VisitCSharpTransition(CSharpTransitionSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatementLiteralSyntax node.</summary>
    public virtual void VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpressionLiteralSyntax node.</summary>
    public virtual void VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpHiddenLiteralSyntax node.</summary>
    public virtual void VisitCSharpHiddenLiteral(CSharpHiddenLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpNoneLiteralSyntax node.</summary>
    public virtual void VisitCSharpNoneLiteral(CSharpNoneLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpCodeBlockSyntax node.</summary>
    public virtual void VisitCSharpCodeBlock(CSharpCodeBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpTemplateBlockSyntax node.</summary>
    public virtual void VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatement node.</summary>
    public virtual void VisitCSharpStatement(CSharpStatement node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatementBodySyntax node.</summary>
    public virtual void VisitCSharpStatementBody(CSharpStatementBodySyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpression node.</summary>
    public virtual void VisitCSharpExpression(CSharpExpression node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpressionBodySyntax node.</summary>
    public virtual void VisitCSharpExpressionBody(CSharpExpressionBodySyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpImplicitExpression node.</summary>
    public virtual void VisitCSharpImplicitExpression(CSharpImplicitExpression node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpImplicitExpressionBodySyntax node.</summary>
    public virtual void VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveSyntax node.</summary>
    public virtual void VisitCSharpDirective(CSharpDirectiveSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveBodySyntax node.</summary>
    public virtual void VisitCSharpDirectiveBody(CSharpDirectiveBodySyntax node)
    {
      DefaultVisit(node);
    }
  }

  internal partial class SyntaxRewriter : SyntaxVisitor<SyntaxNode>
  {
    public override SyntaxNode VisitRazorCommentBlock(RazorCommentBlockSyntax node)
    {
      var startCommentTransition = (SyntaxToken)VisitToken(node.StartCommentTransition);
      var startCommentStar = (SyntaxToken)VisitToken(node.StartCommentStar);
      var comment = (SyntaxToken)VisitToken(node.Comment);
      var endCommentStar = (SyntaxToken)VisitToken(node.EndCommentStar);
      var endCommentTransition = (SyntaxToken)VisitToken(node.EndCommentTransition);
      return node.Update(startCommentTransition, startCommentStar, comment, endCommentStar, endCommentTransition);
    }

    public override SyntaxNode VisitRazorMetaCode(RazorMetaCodeSyntax node)
    {
      var metaCode = VisitList(node.MetaCode);
      return node.Update(metaCode);
    }

    public override SyntaxNode VisitHtmlTransition(HtmlTransitionSyntax node)
    {
      var transitionTokens = VisitList(node.TransitionTokens);
      return node.Update(transitionTokens);
    }

    public override SyntaxNode VisitHtmlTextLiteral(HtmlTextLiteralSyntax node)
    {
      var textTokens = VisitList(node.TextTokens);
      return node.Update(textTokens);
    }

    public override SyntaxNode VisitHtmlDocument(HtmlDocumentSyntax node)
    {
      var document = (HtmlMarkupBlockSyntax)Visit(node.Document);
      return node.Update(document);
    }

    public override SyntaxNode VisitHtmlBlock(HtmlBlockSyntax node)
    {
      var children = VisitList(node.Children);
      return node.Update(children);
    }

    public override SyntaxNode VisitHtmlMarkupBlock(HtmlMarkupBlockSyntax node)
    {
      var children = VisitList(node.Children);
      return node.Update(children);
    }

    public override SyntaxNode VisitHtmlCommentBlock(HtmlCommentBlockSyntax node)
    {
      var children = VisitList(node.Children);
      return node.Update(children);
    }

    public override SyntaxNode VisitHtmlTagBlock(HtmlTagBlockSyntax node)
    {
      var children = VisitList(node.Children);
      return node.Update(children);
    }

    public override SyntaxNode VisitHtmlMinimizedAttributeBlock(HtmlMinimizedAttributeBlockSyntax node)
    {
      var namePrefix = (HtmlTextLiteralSyntax)Visit(node.NamePrefix);
      var name = (HtmlTextLiteralSyntax)Visit(node.Name);
      return node.Update(namePrefix, name);
    }

    public override SyntaxNode VisitHtmlAttributeBlock(HtmlAttributeBlockSyntax node)
    {
      var namePrefix = (HtmlTextLiteralSyntax)Visit(node.NamePrefix);
      var name = (HtmlTextLiteralSyntax)Visit(node.Name);
      var nameSuffix = (HtmlTextLiteralSyntax)Visit(node.NameSuffix);
      var equalsToken = (SyntaxToken)VisitToken(node.EqualsToken);
      var valuePrefix = (HtmlTextLiteralSyntax)Visit(node.ValuePrefix);
      var value = (HtmlBlockSyntax)Visit(node.Value);
      var valueSuffix = (HtmlTextLiteralSyntax)Visit(node.ValueSuffix);
      return node.Update(namePrefix, name, nameSuffix, equalsToken, valuePrefix, value, valueSuffix);
    }

    public override SyntaxNode VisitHtmlLiteralAttributeValue(HtmlLiteralAttributeValueSyntax node)
    {
      var prefix = (HtmlTextLiteralSyntax)Visit(node.Prefix);
      var value = (HtmlTextLiteralSyntax)Visit(node.Value);
      return node.Update(prefix, value);
    }

    public override SyntaxNode VisitHtmlDynamicAttributeValue(HtmlDynamicAttributeValueSyntax node)
    {
      var prefix = (HtmlTextLiteralSyntax)Visit(node.Prefix);
      var value = (HtmlBlockSyntax)Visit(node.Value);
      return node.Update(prefix, value);
    }

    public override SyntaxNode VisitCSharpTransition(CSharpTransitionSyntax node)
    {
      var transition = (SyntaxToken)VisitToken(node.Transition);
      return node.Update(transition);
    }

    public override SyntaxNode VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node)
    {
      var cSharpTokens = VisitList(node.CSharpTokens);
      return node.Update(cSharpTokens);
    }

    public override SyntaxNode VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node)
    {
      var cSharpTokens = VisitList(node.CSharpTokens);
      return node.Update(cSharpTokens);
    }

    public override SyntaxNode VisitCSharpHiddenLiteral(CSharpHiddenLiteralSyntax node)
    {
      var cSharpTokens = VisitList(node.CSharpTokens);
      return node.Update(cSharpTokens);
    }

    public override SyntaxNode VisitCSharpNoneLiteral(CSharpNoneLiteralSyntax node)
    {
      var cSharpTokens = VisitList(node.CSharpTokens);
      return node.Update(cSharpTokens);
    }

    public override SyntaxNode VisitCSharpCodeBlock(CSharpCodeBlockSyntax node)
    {
      var children = VisitList(node.Children);
      return node.Update(children);
    }

    public override SyntaxNode VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node)
    {
      var children = VisitList(node.Children);
      return node.Update(children);
    }

    public override SyntaxNode VisitCSharpStatement(CSharpStatement node)
    {
      var transition = (CSharpTransitionSyntax)Visit(node.Transition);
      var body = (CSharpSyntaxNode)Visit(node.Body);
      return node.Update(transition, body);
    }

    public override SyntaxNode VisitCSharpStatementBody(CSharpStatementBodySyntax node)
    {
      var openBrace = (RazorMetaCodeSyntax)Visit(node.OpenBrace);
      var cSharpCode = (CSharpCodeBlockSyntax)Visit(node.CSharpCode);
      var closeBrace = (RazorMetaCodeSyntax)Visit(node.CloseBrace);
      return node.Update(openBrace, cSharpCode, closeBrace);
    }

    public override SyntaxNode VisitCSharpExpression(CSharpExpression node)
    {
      var transition = (CSharpTransitionSyntax)Visit(node.Transition);
      var body = (CSharpSyntaxNode)Visit(node.Body);
      return node.Update(transition, body);
    }

    public override SyntaxNode VisitCSharpExpressionBody(CSharpExpressionBodySyntax node)
    {
      var openParen = (RazorMetaCodeSyntax)Visit(node.OpenParen);
      var cSharpCode = (CSharpCodeBlockSyntax)Visit(node.CSharpCode);
      var closeParen = (RazorMetaCodeSyntax)Visit(node.CloseParen);
      return node.Update(openParen, cSharpCode, closeParen);
    }

    public override SyntaxNode VisitCSharpImplicitExpression(CSharpImplicitExpression node)
    {
      var transition = (CSharpTransitionSyntax)Visit(node.Transition);
      var body = (CSharpSyntaxNode)Visit(node.Body);
      return node.Update(transition, body);
    }

    public override SyntaxNode VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node)
    {
      var cSharpCode = (CSharpCodeBlockSyntax)Visit(node.CSharpCode);
      return node.Update(cSharpCode);
    }

    public override SyntaxNode VisitCSharpDirective(CSharpDirectiveSyntax node)
    {
      var transition = (CSharpTransitionSyntax)Visit(node.Transition);
      var body = (CSharpSyntaxNode)Visit(node.Body);
      return node.Update(transition, body);
    }

    public override SyntaxNode VisitCSharpDirectiveBody(CSharpDirectiveBodySyntax node)
    {
      var keyword = (RazorSyntaxNode)Visit(node.Keyword);
      var cSharpCode = (CSharpCodeBlockSyntax)Visit(node.CSharpCode);
      return node.Update(keyword, cSharpCode);
    }
  }

  internal static partial class SyntaxFactory
  {
    /// <summary>Creates a new RazorCommentBlockSyntax instance.</summary>
    public static RazorCommentBlockSyntax RazorCommentBlock(SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition)
    {
      switch (startCommentTransition.Kind)
      {
        case SyntaxKind.RazorCommentTransition:
          break;
        default:
          throw new ArgumentException("startCommentTransition");
      }
      switch (startCommentStar.Kind)
      {
        case SyntaxKind.RazorCommentStar:
          break;
        default:
          throw new ArgumentException("startCommentStar");
      }
      switch (comment.Kind)
      {
        case SyntaxKind.RazorCommentLiteral:
        case SyntaxKind.Unknown:
          break;
        default:
          throw new ArgumentException("comment");
      }
      switch (endCommentStar.Kind)
      {
        case SyntaxKind.RazorCommentStar:
          break;
        default:
          throw new ArgumentException("endCommentStar");
      }
      switch (endCommentTransition.Kind)
      {
        case SyntaxKind.RazorCommentTransition:
          break;
        default:
          throw new ArgumentException("endCommentTransition");
      }
      return (RazorCommentBlockSyntax)InternalSyntax.SyntaxFactory.RazorCommentBlock((Syntax.InternalSyntax.SyntaxToken)startCommentTransition.Green, (Syntax.InternalSyntax.SyntaxToken)startCommentStar.Green, (Syntax.InternalSyntax.SyntaxToken)comment.Green, (Syntax.InternalSyntax.SyntaxToken)endCommentStar.Green, (Syntax.InternalSyntax.SyntaxToken)endCommentTransition.Green).CreateRed();
    }

    /// <summary>Creates a new RazorCommentBlockSyntax instance.</summary>
    public static RazorCommentBlockSyntax RazorCommentBlock()
    {
      return SyntaxFactory.RazorCommentBlock(SyntaxFactory.Token(SyntaxKind.RazorCommentTransition), SyntaxFactory.Token(SyntaxKind.RazorCommentStar), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.RazorCommentStar), SyntaxFactory.Token(SyntaxKind.RazorCommentTransition));
    }

    /// <summary>Creates a new RazorMetaCodeSyntax instance.</summary>
    public static RazorMetaCodeSyntax RazorMetaCode(SyntaxList<SyntaxToken> metaCode)
    {
      return (RazorMetaCodeSyntax)InternalSyntax.SyntaxFactory.RazorMetaCode(metaCode.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new RazorMetaCodeSyntax instance.</summary>
    public static RazorMetaCodeSyntax RazorMetaCode()
    {
      return SyntaxFactory.RazorMetaCode(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new HtmlTransitionSyntax instance.</summary>
    public static HtmlTransitionSyntax HtmlTransition(SyntaxList<SyntaxToken> transitionTokens)
    {
      return (HtmlTransitionSyntax)InternalSyntax.SyntaxFactory.HtmlTransition(transitionTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new HtmlTransitionSyntax instance.</summary>
    public static HtmlTransitionSyntax HtmlTransition()
    {
      return SyntaxFactory.HtmlTransition(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new HtmlTextLiteralSyntax instance.</summary>
    public static HtmlTextLiteralSyntax HtmlTextLiteral(SyntaxList<SyntaxToken> textTokens)
    {
      return (HtmlTextLiteralSyntax)InternalSyntax.SyntaxFactory.HtmlTextLiteral(textTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new HtmlTextLiteralSyntax instance.</summary>
    public static HtmlTextLiteralSyntax HtmlTextLiteral()
    {
      return SyntaxFactory.HtmlTextLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new HtmlDocumentSyntax instance.</summary>
    public static HtmlDocumentSyntax HtmlDocument(HtmlMarkupBlockSyntax document)
    {
      if (document == null)
        throw new ArgumentNullException(nameof(document));
      return (HtmlDocumentSyntax)InternalSyntax.SyntaxFactory.HtmlDocument(document == null ? null : (InternalSyntax.HtmlMarkupBlockSyntax)document.Green).CreateRed();
    }

    /// <summary>Creates a new HtmlDocumentSyntax instance.</summary>
    public static HtmlDocumentSyntax HtmlDocument()
    {
      return SyntaxFactory.HtmlDocument(SyntaxFactory.HtmlMarkupBlock());
    }

    /// <summary>Creates a new HtmlBlockSyntax instance.</summary>
    public static HtmlBlockSyntax HtmlBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (HtmlBlockSyntax)InternalSyntax.SyntaxFactory.HtmlBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new HtmlBlockSyntax instance.</summary>
    public static HtmlBlockSyntax HtmlBlock()
    {
      return SyntaxFactory.HtmlBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new HtmlMarkupBlockSyntax instance.</summary>
    public static HtmlMarkupBlockSyntax HtmlMarkupBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (HtmlMarkupBlockSyntax)InternalSyntax.SyntaxFactory.HtmlMarkupBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new HtmlMarkupBlockSyntax instance.</summary>
    public static HtmlMarkupBlockSyntax HtmlMarkupBlock()
    {
      return SyntaxFactory.HtmlMarkupBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new HtmlCommentBlockSyntax instance.</summary>
    public static HtmlCommentBlockSyntax HtmlCommentBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (HtmlCommentBlockSyntax)InternalSyntax.SyntaxFactory.HtmlCommentBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new HtmlCommentBlockSyntax instance.</summary>
    public static HtmlCommentBlockSyntax HtmlCommentBlock()
    {
      return SyntaxFactory.HtmlCommentBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new HtmlTagBlockSyntax instance.</summary>
    public static HtmlTagBlockSyntax HtmlTagBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (HtmlTagBlockSyntax)InternalSyntax.SyntaxFactory.HtmlTagBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new HtmlTagBlockSyntax instance.</summary>
    public static HtmlTagBlockSyntax HtmlTagBlock()
    {
      return SyntaxFactory.HtmlTagBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new HtmlMinimizedAttributeBlockSyntax instance.</summary>
    public static HtmlMinimizedAttributeBlockSyntax HtmlMinimizedAttributeBlock(HtmlTextLiteralSyntax namePrefix, HtmlTextLiteralSyntax name)
    {
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      return (HtmlMinimizedAttributeBlockSyntax)InternalSyntax.SyntaxFactory.HtmlMinimizedAttributeBlock(namePrefix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)namePrefix.Green, name == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)name.Green).CreateRed();
    }

    /// <summary>Creates a new HtmlMinimizedAttributeBlockSyntax instance.</summary>
    public static HtmlMinimizedAttributeBlockSyntax HtmlMinimizedAttributeBlock()
    {
      return SyntaxFactory.HtmlMinimizedAttributeBlock(default(HtmlTextLiteralSyntax), SyntaxFactory.HtmlTextLiteral());
    }

    /// <summary>Creates a new HtmlAttributeBlockSyntax instance.</summary>
    public static HtmlAttributeBlockSyntax HtmlAttributeBlock(HtmlTextLiteralSyntax namePrefix, HtmlTextLiteralSyntax name, HtmlTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, HtmlTextLiteralSyntax valuePrefix, HtmlBlockSyntax value, HtmlTextLiteralSyntax valueSuffix)
    {
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      switch (equalsToken.Kind)
      {
        case SyntaxKind.Equals:
          break;
        default:
          throw new ArgumentException("equalsToken");
      }
      if (value == null)
        throw new ArgumentNullException(nameof(value));
      return (HtmlAttributeBlockSyntax)InternalSyntax.SyntaxFactory.HtmlAttributeBlock(namePrefix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)namePrefix.Green, name == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)name.Green, nameSuffix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)nameSuffix.Green, (Syntax.InternalSyntax.SyntaxToken)equalsToken.Green, valuePrefix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)valuePrefix.Green, value == null ? null : (InternalSyntax.HtmlBlockSyntax)value.Green, valueSuffix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)valueSuffix.Green).CreateRed();
    }

    /// <summary>Creates a new HtmlAttributeBlockSyntax instance.</summary>
    public static HtmlAttributeBlockSyntax HtmlAttributeBlock(HtmlTextLiteralSyntax _namePrefix, HtmlTextLiteralSyntax _name, HtmlTextLiteralSyntax _nameSuffix, HtmlTextLiteralSyntax _valuePrefix, HtmlBlockSyntax _value, HtmlTextLiteralSyntax _valueSuffix)
    {
      return SyntaxFactory.HtmlAttributeBlock(_namePrefix, _name, _nameSuffix, SyntaxFactory.Token(SyntaxKind.Equals), _valuePrefix, _value, _valueSuffix);
    }

    /// <summary>Creates a new HtmlAttributeBlockSyntax instance.</summary>
    public static HtmlAttributeBlockSyntax HtmlAttributeBlock()
    {
      return SyntaxFactory.HtmlAttributeBlock(default(HtmlTextLiteralSyntax), SyntaxFactory.HtmlTextLiteral(), default(HtmlTextLiteralSyntax), SyntaxFactory.Token(SyntaxKind.Equals), default(HtmlTextLiteralSyntax), SyntaxFactory.HtmlBlock(), default(HtmlTextLiteralSyntax));
    }

    /// <summary>Creates a new HtmlLiteralAttributeValueSyntax instance.</summary>
    public static HtmlLiteralAttributeValueSyntax HtmlLiteralAttributeValue(HtmlTextLiteralSyntax prefix, HtmlTextLiteralSyntax value)
    {
      if (value == null)
        throw new ArgumentNullException(nameof(value));
      return (HtmlLiteralAttributeValueSyntax)InternalSyntax.SyntaxFactory.HtmlLiteralAttributeValue(prefix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)prefix.Green, value == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)value.Green).CreateRed();
    }

    /// <summary>Creates a new HtmlLiteralAttributeValueSyntax instance.</summary>
    public static HtmlLiteralAttributeValueSyntax HtmlLiteralAttributeValue()
    {
      return SyntaxFactory.HtmlLiteralAttributeValue(default(HtmlTextLiteralSyntax), SyntaxFactory.HtmlTextLiteral());
    }

    /// <summary>Creates a new HtmlDynamicAttributeValueSyntax instance.</summary>
    public static HtmlDynamicAttributeValueSyntax HtmlDynamicAttributeValue(HtmlTextLiteralSyntax prefix, HtmlBlockSyntax value)
    {
      if (value == null)
        throw new ArgumentNullException(nameof(value));
      return (HtmlDynamicAttributeValueSyntax)InternalSyntax.SyntaxFactory.HtmlDynamicAttributeValue(prefix == null ? null : (InternalSyntax.HtmlTextLiteralSyntax)prefix.Green, value == null ? null : (InternalSyntax.HtmlBlockSyntax)value.Green).CreateRed();
    }

    /// <summary>Creates a new HtmlDynamicAttributeValueSyntax instance.</summary>
    public static HtmlDynamicAttributeValueSyntax HtmlDynamicAttributeValue()
    {
      return SyntaxFactory.HtmlDynamicAttributeValue(default(HtmlTextLiteralSyntax), SyntaxFactory.HtmlBlock());
    }

    /// <summary>Creates a new CSharpTransitionSyntax instance.</summary>
    public static CSharpTransitionSyntax CSharpTransition(SyntaxToken transition)
    {
      switch (transition.Kind)
      {
        case SyntaxKind.Transition:
          break;
        default:
          throw new ArgumentException("transition");
      }
      return (CSharpTransitionSyntax)InternalSyntax.SyntaxFactory.CSharpTransition((Syntax.InternalSyntax.SyntaxToken)transition.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpTransitionSyntax instance.</summary>
    public static CSharpTransitionSyntax CSharpTransition()
    {
      return SyntaxFactory.CSharpTransition(SyntaxFactory.Token(SyntaxKind.Transition));
    }

    /// <summary>Creates a new CSharpStatementLiteralSyntax instance.</summary>
    public static CSharpStatementLiteralSyntax CSharpStatementLiteral(SyntaxList<SyntaxToken> cSharpTokens)
    {
      return (CSharpStatementLiteralSyntax)InternalSyntax.SyntaxFactory.CSharpStatementLiteral(cSharpTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new CSharpStatementLiteralSyntax instance.</summary>
    public static CSharpStatementLiteralSyntax CSharpStatementLiteral()
    {
      return SyntaxFactory.CSharpStatementLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpExpressionLiteralSyntax instance.</summary>
    public static CSharpExpressionLiteralSyntax CSharpExpressionLiteral(SyntaxList<SyntaxToken> cSharpTokens)
    {
      return (CSharpExpressionLiteralSyntax)InternalSyntax.SyntaxFactory.CSharpExpressionLiteral(cSharpTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new CSharpExpressionLiteralSyntax instance.</summary>
    public static CSharpExpressionLiteralSyntax CSharpExpressionLiteral()
    {
      return SyntaxFactory.CSharpExpressionLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpHiddenLiteralSyntax instance.</summary>
    public static CSharpHiddenLiteralSyntax CSharpHiddenLiteral(SyntaxList<SyntaxToken> cSharpTokens)
    {
      return (CSharpHiddenLiteralSyntax)InternalSyntax.SyntaxFactory.CSharpHiddenLiteral(cSharpTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new CSharpHiddenLiteralSyntax instance.</summary>
    public static CSharpHiddenLiteralSyntax CSharpHiddenLiteral()
    {
      return SyntaxFactory.CSharpHiddenLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpNoneLiteralSyntax instance.</summary>
    public static CSharpNoneLiteralSyntax CSharpNoneLiteral(SyntaxList<SyntaxToken> cSharpTokens)
    {
      return (CSharpNoneLiteralSyntax)InternalSyntax.SyntaxFactory.CSharpNoneLiteral(cSharpTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new CSharpNoneLiteralSyntax instance.</summary>
    public static CSharpNoneLiteralSyntax CSharpNoneLiteral()
    {
      return SyntaxFactory.CSharpNoneLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpCodeBlockSyntax instance.</summary>
    public static CSharpCodeBlockSyntax CSharpCodeBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (CSharpCodeBlockSyntax)InternalSyntax.SyntaxFactory.CSharpCodeBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new CSharpCodeBlockSyntax instance.</summary>
    public static CSharpCodeBlockSyntax CSharpCodeBlock()
    {
      return SyntaxFactory.CSharpCodeBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new CSharpTemplateBlockSyntax instance.</summary>
    public static CSharpTemplateBlockSyntax CSharpTemplateBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (CSharpTemplateBlockSyntax)InternalSyntax.SyntaxFactory.CSharpTemplateBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new CSharpTemplateBlockSyntax instance.</summary>
    public static CSharpTemplateBlockSyntax CSharpTemplateBlock()
    {
      return SyntaxFactory.CSharpTemplateBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new CSharpStatement instance.</summary>
    public static CSharpStatement CSharpStatement(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpStatement)InternalSyntax.SyntaxFactory.CSharpStatement(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpStatement instance.</summary>
    public static CSharpStatement CSharpStatement(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpStatement(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpStatementBodySyntax instance.</summary>
    public static CSharpStatementBodySyntax CSharpStatementBody(RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace)
    {
      if (openBrace == null)
        throw new ArgumentNullException(nameof(openBrace));
      if (cSharpCode == null)
        throw new ArgumentNullException(nameof(cSharpCode));
      if (closeBrace == null)
        throw new ArgumentNullException(nameof(closeBrace));
      return (CSharpStatementBodySyntax)InternalSyntax.SyntaxFactory.CSharpStatementBody(openBrace == null ? null : (InternalSyntax.RazorMetaCodeSyntax)openBrace.Green, cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green, closeBrace == null ? null : (InternalSyntax.RazorMetaCodeSyntax)closeBrace.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpStatementBodySyntax instance.</summary>
    public static CSharpStatementBodySyntax CSharpStatementBody()
    {
      return SyntaxFactory.CSharpStatementBody(SyntaxFactory.RazorMetaCode(), SyntaxFactory.CSharpCodeBlock(), SyntaxFactory.RazorMetaCode());
    }

    /// <summary>Creates a new CSharpExpression instance.</summary>
    public static CSharpExpression CSharpExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpExpression)InternalSyntax.SyntaxFactory.CSharpExpression(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpExpression instance.</summary>
    public static CSharpExpression CSharpExpression(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpExpression(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpExpressionBodySyntax instance.</summary>
    public static CSharpExpressionBodySyntax CSharpExpressionBody(RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen)
    {
      if (openParen == null)
        throw new ArgumentNullException(nameof(openParen));
      if (cSharpCode == null)
        throw new ArgumentNullException(nameof(cSharpCode));
      if (closeParen == null)
        throw new ArgumentNullException(nameof(closeParen));
      return (CSharpExpressionBodySyntax)InternalSyntax.SyntaxFactory.CSharpExpressionBody(openParen == null ? null : (InternalSyntax.RazorMetaCodeSyntax)openParen.Green, cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green, closeParen == null ? null : (InternalSyntax.RazorMetaCodeSyntax)closeParen.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpExpressionBodySyntax instance.</summary>
    public static CSharpExpressionBodySyntax CSharpExpressionBody()
    {
      return SyntaxFactory.CSharpExpressionBody(SyntaxFactory.RazorMetaCode(), SyntaxFactory.CSharpCodeBlock(), SyntaxFactory.RazorMetaCode());
    }

    /// <summary>Creates a new CSharpImplicitExpression instance.</summary>
    public static CSharpImplicitExpression CSharpImplicitExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpImplicitExpression)InternalSyntax.SyntaxFactory.CSharpImplicitExpression(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpImplicitExpression instance.</summary>
    public static CSharpImplicitExpression CSharpImplicitExpression(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpImplicitExpression(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpImplicitExpressionBodySyntax instance.</summary>
    public static CSharpImplicitExpressionBodySyntax CSharpImplicitExpressionBody(CSharpCodeBlockSyntax cSharpCode)
    {
      if (cSharpCode == null)
        throw new ArgumentNullException(nameof(cSharpCode));
      return (CSharpImplicitExpressionBodySyntax)InternalSyntax.SyntaxFactory.CSharpImplicitExpressionBody(cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpImplicitExpressionBodySyntax instance.</summary>
    public static CSharpImplicitExpressionBodySyntax CSharpImplicitExpressionBody()
    {
      return SyntaxFactory.CSharpImplicitExpressionBody(SyntaxFactory.CSharpCodeBlock());
    }

    /// <summary>Creates a new CSharpDirectiveSyntax instance.</summary>
    public static CSharpDirectiveSyntax CSharpDirective(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpDirectiveSyntax)InternalSyntax.SyntaxFactory.CSharpDirective(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpDirectiveSyntax instance.</summary>
    public static CSharpDirectiveSyntax CSharpDirective(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpDirective(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpDirectiveBodySyntax instance.</summary>
    public static CSharpDirectiveBodySyntax CSharpDirectiveBody(RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode)
    {
      if (keyword == null)
        throw new ArgumentNullException(nameof(keyword));
      return (CSharpDirectiveBodySyntax)InternalSyntax.SyntaxFactory.CSharpDirectiveBody(keyword == null ? null : (InternalSyntax.RazorSyntaxNode)keyword.Green, cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpDirectiveBodySyntax instance.</summary>
    public static CSharpDirectiveBodySyntax CSharpDirectiveBody(RazorSyntaxNode keyword)
    {
      return SyntaxFactory.CSharpDirectiveBody(keyword, default(CSharpCodeBlockSyntax));
    }
  }
}
